{"version":3,"file":"static/js/456.4e80b737.chunk.js","mappings":"qRAEaA,EAAUC,EAAAA,GAAAA,IAAH,uEAIPC,EAAcD,EAAAA,GAAAA,GAAH,4E,SC+CxB,EA1CgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACXI,MAAM,sCAAD,OACmCH,EADnC,4BAC8DI,EAAAA,GAD9D,2BAGFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAG,GACJ,IAAQC,EAAYD,EAAZC,QACRZ,EAAWY,EACZ,IACAC,OAAM,WACLC,EAAAA,GAAAA,MAAY,uBACb,IACAC,SAAQ,kBAAMb,GAAW,EAAjB,GACZ,GAAE,CAACC,IACAF,GACK,SAACe,EAAA,EAAD,IAGFjB,EAAQkB,QACb,SAACtB,EAAD,WACE,SAACE,EAAD,UACGE,EAAQmB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACX,2BACE,wBAAKD,KACL,uBAAIC,MAFGD,EADE,SASjB,SAACxB,EAAD,WACE,wBAAI,2BAGT,C","sources":["pages/Reviews/Reviews.styled.js","pages/Reviews/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.div`\n  padding-top: 25px;\n  padding-bottom: 25px;\n`;\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Loader from 'components/Loader/Loader';\nimport { API_KEY } from 'utils/constans';\n\nimport { Section, ReviewsList } from './Reviews.styled';\n// const API_KEY = '7779282c18a7b23736a627b06c608831';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    )\n      .then(res => res.json())\n      .then(data => {\n        const { results } = data;\n        setReviews(results);\n      })\n      .catch(() => {\n        toast.error('Something went wrong');\n      })\n      .finally(() => setLoading(false));\n  }, [movieId]);\n  if (loading) {\n    return <Loader />;\n  }\n\n  return reviews.length ? (\n    <Section>\n      <ReviewsList>\n        {reviews.map(({ author, content }) => (\n          <li key={author}>\n            <h4>{author}</h4>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ReviewsList>\n    </Section>\n  ) : (\n    <Section>\n      <h4>Reviews list is empty</h4>\n    </Section>\n  );\n};\n\nexport default Reviews;\n"],"names":["Section","styled","ReviewsList","useState","reviews","setReviews","loading","setLoading","movieId","useParams","useEffect","fetch","API_KEY","then","res","json","data","results","catch","toast","finally","Loader","length","map","author","content"],"sourceRoot":""}