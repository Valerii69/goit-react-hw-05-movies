{"version":3,"file":"static/js/422.2b433d83.chunk.js","mappings":"6QAEaA,EAAUC,EAAAA,GAAAA,IAAH,uEAIPC,EAAWD,EAAAA,GAAAA,GAAH,sJAQRE,EAAWF,EAAAA,GAAAA,GAAH,uQ,SCLfG,EAAQC,EAAQ,MAgDtB,EA9Ca,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACXN,EAAM,sCAAD,OACmCO,EADnC,4BAC8DG,EAAAA,GAD9D,oBAGFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAG,GACJ,IAAQX,EAASW,EAATX,KACRC,EAAQD,EACT,IAIAY,SAAQ,kBAAMT,GAAW,EAAjB,GACZ,GAAE,CAACC,IACAF,GACK,SAACW,EAAA,EAAD,IAGFb,EAAKc,QACV,SAACrB,EAAD,WACE,SAACE,EAAD,UACGK,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAApB,OACR,UAACtB,EAAD,YACE,gBACEuB,IAAKD,EAAeE,EAAAA,GAAWF,EAAeG,EAAAA,GAC9CC,IAAKN,KAEP,0BAAI,UAAQA,MACZ,yBAAG,cAAYC,OANFD,EADP,SAad,SAACvB,EAAD,WACE,uBAAG,wBAGR,C,uBCpDD,IAUI8B,EAVY,WAIf,GAAoB,qBAATC,KAAwB,OAAOA,KAC1C,GAAsB,qBAAXC,OAA0B,OAAOA,OAC5C,GAAsB,qBAAXC,EAAAA,EAA0B,OAAOA,EAAAA,EAC5C,MAAM,IAAIC,MAAM,iCAChB,CAEkBC,GAEnBC,EAAOC,QAAUA,EAAUP,EAAa1B,MAGpC0B,EAAa1B,QAChBiC,EAAAA,QAAkBP,EAAa1B,MAAMkC,KAAKR,IAG3CO,EAAQE,QAAUT,EAAaS,QAC/BF,EAAQG,QAAUV,EAAaU,QAC/BH,EAAQI,SAAWX,EAAaW,Q","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","../node_modules/node-fetch/browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.div`\n  padding-top: 25px;\n  padding-bottom: 25px;\n`;\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 25px;\n  flex-wrap: wrap;\n  /* @media screen and (min-width: 1200px) {\n  } */\n`;\nexport const CastItem = styled.li`\n  display: block;\n  box-shadow: 4px 1px 4px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  /* transition: color cubic-bezier(0.075, 0.82, 0.165, 1, 25), transform 1s; */\n\n  width: 150px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\n// import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Loader from 'components/Loader/Loader';\nimport { NO_IMAGE, IMG_PATH, API_KEY } from 'utils/constans';\n\nimport { Section, CastList, CastItem } from './Cast.styled';\nconst fetch = require('node-fetch');\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n  useEffect(() => {\n    setLoading(true);\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    )\n      .then(res => res.json())\n      .then(data => {\n        const { cast } = data;\n        setCast(cast);\n      })\n      // .catch(() => {\n      //   toast.error('Something went wrong');\n      // })\n      .finally(() => setLoading(false));\n  }, [movieId]);\n  if (loading) {\n    return <Loader />;\n  }\n\n  return cast.length ? (\n    <Section>\n      <CastList>\n        {cast.map(({ name, character, profile_path }) => (\n          <CastItem key={name}>\n            <img\n              src={profile_path ? IMG_PATH + profile_path : NO_IMAGE}\n              alt={name}\n            />\n            <h4>Actor: {name}</h4>\n            <p>Character: {character}</p>\n          </CastItem>\n        ))}\n      </CastList>\n    </Section>\n  ) : (\n    <Section>\n      <p>Cast list is empty</p>\n    </Section>\n  );\n};\n\nexport default Cast;\n","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n"],"names":["Section","styled","CastList","CastItem","fetch","require","useState","cast","setCast","loading","setLoading","movieId","useParams","useEffect","API_KEY","then","res","json","data","finally","Loader","length","map","name","character","profile_path","src","IMG_PATH","NO_IMAGE","alt","globalObject","self","window","global","Error","getGlobal","module","exports","bind","Headers","Request","Response"],"sourceRoot":""}