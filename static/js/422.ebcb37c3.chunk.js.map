{"version":3,"file":"static/js/422.ebcb37c3.chunk.js","mappings":"8QAEaA,EAAUC,EAAAA,GAAAA,IAAH,uEAIPC,EAAWD,EAAAA,GAAAA,GAAH,wKASRE,EAAWF,EAAAA,GAAAA,GAAH,yC,SCyCrB,EA9Ca,WACX,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACXI,MAAM,sCAAD,OACmCH,EADnC,4BAC8DI,EAAAA,GAD9D,oBAGFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAG,GACJ,IAAQZ,EAASY,EAATZ,KACRC,EAAQD,EACT,IACAa,OAAM,WACLC,EAAAA,GAAAA,MAAY,uBACb,IACAC,SAAQ,kBAAMZ,GAAW,EAAjB,GACZ,GAAE,CAACC,IACAF,GACK,SAACc,EAAA,EAAD,IAGFhB,EAAKiB,QACV,SAACtB,EAAD,WACE,SAACE,EAAD,UACGG,EAAKkB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAApB,OACR,UAACvB,EAAD,YACE,gBACEwB,IAAOD,EAAeE,EAAAA,GAAWF,EAAeG,EAAAA,GAChDC,IAAKN,KAEP,yBAAG,UAAQA,MACX,yBAAG,cAAYC,OANFD,EADP,SAad,SAACxB,EAAD,WACE,uBAAG,wBAGR,C","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.div`\n  padding-top: 25px;\n  padding-bottom: 25px;\n`;\nexport const CastList = styled.ul`\n  display: flex;\n  justify-content: center;\n\n  gap: 20px;\n  @media screen and (min-width: 1200px) {\n    justify-content: flex-start;\n  }\n`;\nexport const CastItem = styled.li`\n  width: 150px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Loader from 'components/Loader/Loader';\nimport { NO_IMAGE, IMG_PATH, API_KEY } from 'utils/constans';\n\nimport { Section, CastList, CastItem } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n  useEffect(() => {\n    setLoading(true);\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    )\n      .then(res => res.json())\n      .then(data => {\n        const { cast } = data;\n        setCast(cast);\n      })\n      .catch(() => {\n        toast.error('Something went wrong');\n      })\n      .finally(() => setLoading(false));\n  }, [movieId]);\n  if (loading) {\n    return <Loader />;\n  }\n\n  return cast.length ? (\n    <Section>\n      <CastList>\n        {cast.map(({ name, character, profile_path }) => (\n          <CastItem key={name}>\n            <img\n              src={!!profile_path ? IMG_PATH + profile_path : NO_IMAGE}\n              alt={name}\n            />\n            <p>Actor: {name}</p>\n            <p>Character: {character}</p>\n          </CastItem>\n        ))}\n      </CastList>\n    </Section>\n  ) : (\n    <Section>\n      <p>Cast list is empty</p>\n    </Section>\n  );\n};\n\nexport default Cast;\n"],"names":["Section","styled","CastList","CastItem","useState","cast","setCast","loading","setLoading","movieId","useParams","useEffect","fetch","API_KEY","then","res","json","data","catch","toast","finally","Loader","length","map","name","character","profile_path","src","IMG_PATH","NO_IMAGE","alt"],"sourceRoot":""}